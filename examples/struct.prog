
# an interface can only define function signatures and properties
# a property can be optionally typed
# an interface does not hold a vtable or any of that nonsense its just a template that ensures a struct will always have certain properties and functions
interface IUser:
  username: string 

  fn greet()

struct User implements IUser:

  # body can be optional so it will just assign params to properties with the same name
  init(username, password)

  fn greet():
    println(f"hello{this.username}")

# adds an override to the global to_string function
fn to_string(user User):
  pass

# main is optional will execute from here if defined or if being run directly
fn main():
  user := User("john smith", "donthackme")

  user.greet()
